{"version":3,"sources":["/client/js/beer-sample.js"],"names":["window","SW","breweryId","allLatlng","allMarkers","breweryName","infowindow","pos","userCords","tempMarkerHolder","BeerSampleComponent","console","log","getTheData","evt","$","ajax","url","done","data","dataAsObjects","JSON","parse","navigator","geolocation","error","err","success","coords","getCurrentPosition","alert","setState","apiResult","theList","state","map","brewery","index","latitude","longitude","React","Component"],"mappings":";;;;;;;;;;AAAAA,OAAOC,EAAP,GAAYD,OAAOC,EAAP,IAAa,EAAzB;AACA,CAAC,YAAW;AACV,MAAIC,YAAY,EAAhB,CADU,CACU;AACrB,MAAIC,YAAY,EAAhB,CAFW,CAES;AACpB,MAAIC,aAAa,EAAjB,CAHW,CAGU;AACrB,MAAIC,cAAc,EAAlB,CAJW,CAIW;AACtB,MAAIC,aAAa,IAAjB;AACA,MAAIC,GAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,mBAAmB,EAAvB;;AARW,MAWJC,mBAXI;AAAA;;AAaR,mCAAc;AAAA;;AAAA;AAEb;;AAfO;AAAA;AAAA,0CAiBY;AAClBC,gBAAQC,GAAR,CAAY,gCAAZ;AACA,aAAKC,UAAL;AACD;AApBO;AAAA;AAAA,iCAsBGC,GAtBH,EAsBQ;AAAA;;AACd;AACEC,UAAEC,IAAF,CAAO;AACLC,eAAK;AADA,SAAP,EAGCC,IAHD,CAGM,UAACC,IAAD,EAAU;AACdR,kBAAQC,GAAR,CAAY,UAAZ;;AAEA,cAAIQ,gBAAgBC,KAAKC,KAAL,CAAWH,IAAX,CAApB;AACA;AACA,cAAII,UAAUC,WAAd,EAA2B;AAAA,gBAGdC,KAHc,GAGvB,SAASA,KAAT,CAAeC,GAAf,EAAoB;AAClB;AACAf,sBAAQC,GAAR,CAAY,YAAZ;AACD,aANsB;;AAAA,gBAQde,OARc,GAQvB,SAASA,OAAT,CAAiBpB,GAAjB,EAAqB;AACnBC,0BAAYD,IAAIqB,MAAhB;AACA;AACAjB,sBAAQC,GAAR,CAAY,aAAZ,EAA2BL,GAA3B;AACD,aAZsB;;AAcvB;;;AAbFI,oBAAQC,GAAR,CAAYW,UAAUC,WAAtB;;AAcED,sBAAUC,WAAV,CAAsBK,kBAAtB,CAAyCF,OAAzC,EAAkDF,KAAlD;AACA;AACD,WAjBH,MAkBK;AACCK,kBAAM,8CAAN;AACD;AACL;AACA,iBAAKC,QAAL,CAAc;AACZC,uBAAWZ;AADC,WAAd;AAGD,SAjCD;AAkCF;AACD;AA3DO;AAAA;AAAA,+BA6DA;AACN;AACA,YAAIa,OAAJ;;AAEA,YAAI,KAAKC,KAAL,IAAc,IAAlB,EAAwB;AACtBvB,kBAAQC,GAAR,CAAY,KAAKsB,KAAjB;AACAD,oBAAU;AAAA;AAAA,cAAI,WAAU,SAAd;AAET,iBAAKC,KAAL,CAAWF,SAAX,CAAqBb,IAArB,CAA0BgB,GAA1B,CAA8B,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACjD,qBAAO;AAAA;AAAA,kBAAI,KAAKA,KAAT;AAAA;AAA6BD,wBAAQE,QAArC;AAAA;AAA6DF,wBAAQG,SAArE;AAAA;AAAA,eAAP;AACC,aAFF,CAFS;AAAA;AAAA,WAAV;AAOD;;AAED,eAAO;AAAA;AAAA;AACJN;AADI,SAAP;AAGD;AA/EO;;AAAA;AAAA,IAWwBO,MAAMC,SAX9B;;AAiFVxC,KAAGS,mBAAH,GAAyBA,mBAAzB;AACD,CAlFD","file":"beer-sample.js","sourcesContent":["window.SW = window.SW || {};\n(function() {\n  var breweryId = []; //returned from the API\n\tvar allLatlng = []; //returned from the API\n\tvar allMarkers = []; //returned from the API\n\tvar breweryName = []; //returned from the API\n\tvar infowindow = null;\n\tvar pos;\n\tvar userCords;\n\tvar tempMarkerHolder = [];\n\n\n  class BeerSampleComponent extends React.Component{\n\n    constructor() {\n      super();\n    }\n\n    componentDidMount() {\n      console.log('AppComponent.ComponentDidMount');\n      this.getTheData();\n    }\n\n    getTheData(evt) {\n      // if (evt.keyCode === 13) {\n        $.ajax({\n          url: \"/api/beer\"\n        })\n        .done((data) => {\n          console.log('got data');\n\n          var dataAsObjects = JSON.parse(data);\n          //Start geolocation\n          if (navigator.geolocation) {\n            console.log(navigator.geolocation);\n\n              function error(err) {\n                // console.warn('ERROR(' + err.code + '): ' + err.message);\n                console.log(\"error-test\");\n              }\n\n              function success(pos){\n                userCords = pos.coords;\n                // return userCords;\n                console.log(\"sucess-test\", pos);\n              }\n\n              // Get the user's current position\n              navigator.geolocation.getCurrentPosition(success, error);\n              // console.log(pos.latitude + \" \" + pos.longitude);\n            }\n          else {\n                alert('Geolocation is not supported in your browser');\n              }\n          //End Geo location\n          this.setState({\n            apiResult: dataAsObjects\n          });\n        });\n      // }\n    }\n\n    render(){\n      // console.log('render', this.state);\n      var theList;\n\n      if (this.state != null) {\n        console.log(this.state);\n        theList = <ul className=\"theList\">\n\n        {this.state.apiResult.data.map((brewery, index) => {\n          return <li key={index}> (latitude: {brewery.latitude}) (longitude: {brewery.longitude})</li>\n          })\n        })}\n        </ul>;\n      }\n\n      return <div>\n        {theList}\n        </div>\n    }\n  }\n  SW.BeerSampleComponent = BeerSampleComponent;\n})();\n"]}